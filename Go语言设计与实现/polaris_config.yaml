# server启动引导配置
bootstrap:
  # 全局日志
  logger:
    config:
      rotateOutputPath: log/polaris-config.log
      errorRotateOutputPath: log/polaris-config-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    auth:
      rotateOutputPath: log/polaris-auth.log
      errorRotateOutputPath: log/polaris-auth-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    store:
      rotateOutputPath: log/polaris-store.log
      errorRotateOutputPath: log/polaris-store-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    cache:
      rotateOutputPath: log/polaris-cache.log
      errorRotateOutputPath: log/polaris-cache-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    naming:
      rotateOutputPath: log/polaris-naming.log
      errorRotateOutputPath: log/polaris-naming-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    healthcheck:
      rotateOutputPath: log/polaris-healthcheck.log
      errorRotateOutputPath: log/polaris-healthcheck-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    xdsv3:
      rotateOutputPath: log/polaris-xdsv3.log
      errorRotateOutputPath: log/polaris-xdsv3-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
    default:
      rotateOutputPath: log/polaris-default.log
      errorRotateOutputPath: log/polaris-default-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      outputPaths:
        - stdout
      errorOutputPaths:
        - stderr
  # 按顺序启动server
  startInOrder:
    open: true # 是否开启，默认是关闭
    key: sz # 全局锁
  # 注册为北极星服务
  polaris_service:
    {{- if eq .Values.global.mode "cluster" }}
    probe_address: {{ .Values.polaris.storage.db.address }}
    {{- end }}
    enable_register: true
    isolated: false
    services:
      - name: polaris.checker
        protocols:
          - service-grpc
# apiserver配置
apiservers:
  - name: service-eureka
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.eurekaPort }}
      namespace: default
      owner: polaris
      refreshInterval: 10
      deltaExpireInterval: 60
      unhealthyExpireInterval: 180
      connLimit:
        openConnLimit: false
        maxConnPerHost: 1024
        maxConnLimit: 10240
        whiteList: 127.0.0.1
        purgeCounterInterval: 10s
        purgeCounterExpired: 5s
  - name: api-http # 协议名，全局唯一
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.httpPort }}
      enablePprof: true # debug pprof
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
        whiteList: 127.0.0.1
        purgeCounterInterval: 10s
        purgeCounterExpired: 5s
    api:
      admin:
        enable: true
      console:
        enable: true
        include: [default]
      client:
        enable: true
        include: [discover, register, healthcheck]
      config:
        enable: true
        include: [default]
  - name: service-grpc
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.serviceGrpcPort }}
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
    api:
      client:
        enable: true
        include: [discover, register, healthcheck]
  - name: config-grpc
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.configGrpcPort }}
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
    api:
      client:
        enable: true
  - name: xds-v3
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.xdsv3Port }}
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 10240
  - name: prometheus-sd
    option:
      listenIP: "0.0.0.0"
      listenPort: {{ .Values.service.prometheusPort }}
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 10240
#  - name: service-l5
#    option:
#      listenIP: 0.0.0.0
#      listenPort: 7779
#      clusterName: cl5.discover
# 核心逻辑的配置
auth:
  name: defaultAuth
  option:
    salt: polarismesh@2021
    consoleOpen: {{ .Values.polaris.auth.consoleOpen }}
    clientOpen: {{ .Values.polaris.auth.clientOpen }}
namespace:
  autoCreate: true
naming:
  auth:
    open: false
  # 批量控制器
  batch:
    register:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
    deregister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
    clientRegister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
    clientDeregister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
# 配置中心模块启动配置
config:
  # 是否启动配置模块
  open: true
  cache:
    #配置文件缓存过期时间，单位s
    expireTimeAfterWrite: 3600
# 健康检查的配置
healthcheck:
  open: true
  service: polaris.checker
  slotNum: 30
  minCheckInterval: 1s
  maxCheckInterval: 30s
  batch:
    heartbeat:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
  checkers:
{{- if eq .Values.global.mode "cluster" }}
    - name: heartbeatRedis
      option:
        kvAddr: {{ .Values.polaris.storage.redis.address }}
        {{- if .Values.polaris.storage.redis.user }}
        kvUser: {{ .Values.polaris.storage.redis.user }}
        {{- end }}
        {{- if .Values.polaris.storage.redis.password }}
        kvPasswd: {{ .Values.polaris.storage.redis.password }}
        {{- end }}
        poolSize: 200
        minIdleConns: 30
        idleTimeout: 120s
        connectTimeout: 200ms
        msgTimeout: 200ms
        concurrency: 200
        withTLS: {{ .Values.polaris.storage.redis.withTLS | default false }}
{{- else }}
    - name: heartbeatMemory
{{- end }}
# 缓存配置
cache:
  open: true
  resources:
    - name: service # 加载服务数据
      option:
        disableBusiness: false # 不加载业务服务
        needMeta: true # 加载服务元数据
    - name: instance # 加载实例数据
      option:
        disableBusiness: false # 不加载业务服务实例
        needMeta: true # 加载实例元数据
    - name: routingConfig # 加载路由数据
    - name: rateLimitConfig # 加载限流数据
    - name: circuitBreakerConfig # 加载熔断数据
    - name: users
    - name: strategyRule
    - name: namespace
    - name: client
#    - name: l5 # 加载l5数据
# 存储配置
store:
{{- if eq .Values.global.mode "cluster" }}
# 数据库存储插件
{{- with .Values.polaris.storage.db }}
  name: defaultStore
  option:
    master:
      dbType: mysql
      dbUser: {{ .user }}
      dbPwd: {{ .password }}
      dbAddr: {{ .address }}
      dbName: {{ .name }}
      maxOpenConns: -1
      maxIdleConns: -1
      connMaxLifetime: 300 # 单位秒
      txIsolationLevel: 2 #LevelReadCommitted
{{- end }}
{{- else }}
# 单机文件存储插件
  name: boltdbStore
  option:
    path: ./polaris.bolt
{{- end }}
# 插件配置
plugin:
  history:
    name: HistoryLogger
  discoverEvent:
    name: discoverEventLocal
    # option:
    #   queueSize: 1024
    #   outputPath: ./discover-event
    #   rotationMaxSize: 500
    #   rotationMaxAge: 8
    #   rotationMaxBackups: 100
  discoverStatis:
    name: discoverLocal
    option:
      interval: 60 # 统计间隔，单位为秒
      outputPath: ./discover-statis
  statis:
    name: local
    option:
      interval: 60 # 统计间隔，单位为秒
      outputPath: ./statis
    # api 调用指标数据计算上报到 prometheus
    # name: prometheus
    # option:
    #   interval: 60 # 统计间隔，单位为秒
  auth:
    name: defaultAuth
  ratelimit:
    name: token-bucket
    option:
      remote-conf: false # 是否使用远程配置
      ip-limit: # ip级限流，全局
        open: true # 系统是否开启ip级限流
        global:
          open: true
          bucket: 300 # 最高峰值
          rate: 200 # 平均一个IP每秒的请求数
        resource-cache-amount: 1024 # 最大缓存的IP个数
        white-list: [127.0.0.1]
      instance-limit:
        open: true
        global:
          bucket: 200
          rate: 100
        resource-cache-amount: 1024
      api-limit: # 接口级限流
        open: false # 是否开启接口限流，全局开关，只有为true，才代表系统的限流开启。默认关闭
        rules:
          - name: store-read
            limit:
              open: true # 接口的全局配置，如果在api子项中，不配置，则该接口依据global来做限制
              bucket: 2000 # 令牌桶最大值
              rate: 1000 # 每秒产生的令牌数
          - name: store-write
            limit:
              open: true
              bucket: 1000
              rate: 500
        apis:
          - name: "POST:/v1/naming/services"
            rule: store-write
          - name: "PUT:/v1/naming/services"
            rule: store-write
          - name: "POST:/v1/naming/services/delete"
            rule: store-write
          - name: "GET:/v1/naming/services"
            rule: store-read
          - name: "GET:/v1/naming/services/count"
            rule: store-read